{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-17-상속과-다형성/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>상속과 다형성</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"이름\"</span></span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"사람이 걷는다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> studentId<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"학생이 걷는다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Undergraduate</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> major<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"전공\"</span></span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"대학생이 걷는다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 모두 Person 타입으로 인스턴스 생성</span>\n<span class=\"token keyword\">var</span> person1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> student1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> undergraduate1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Undergraduate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 사람이 걷는다.</span>\nstudent1<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 학생이 걷는다.</span>\nundergraduate1<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 대학생이 걷는다.</span></code></pre></div>\n<p>위 예시를 보면 <code class=\"language-text\">person1, student1, undergraduate1</code> 인스턴스 모두 <code class=\"language-text\">Person</code> 타입으로 정의되어 있다.</p>\n<p>그렇다면 <code class=\"language-text\">student1, undergraduate1</code> 에서 상속되어 재정의한 <code class=\"language-text\">walk</code> 메서드를 호출했을때 “사람이 걷는다.”가 3번 출력될것이라고 예상할 수 있지만 실제로는 재정의한 메서드의 텍스트가 출력된다.</p>\n<br/>\n<p><code class=\"language-text\">student1, undergraduate1</code> 의 <code class=\"language-text\">walk</code> 메서드는 <code class=\"language-text\">Person</code>의 <code class=\"language-text\">walk</code> 메서드를 가리키고 있지 않고, 각자의 <code class=\"language-text\">walk</code> 메서드의 코드를 가리키고 있다는것이다.</p>\n<br/>\n<h3>다형성(Polymorphism)</h3>\n<p>위 예시처럼 다형성이 구현되는 것은 <b>클래스의 상속</b>과 깊은 연관이 있다.</p>\n<ul>\n<li>\n<p>하나의 객체(인스턴스)가 <b>여러가지의 타입의 형태로 저장 될 수 있고</b>, 다양한 메서드의 형태로 동작 가능함을 의미한다.</p>\n</li>\n<li>\n<p>하나의 객체는 다양한 방식으로 동작 가능하다. (동적바인딩)</p>\n</li>\n</ul>","frontmatter":{"title":"클래스(Class) - 상속과 다형성","summary":"클래스(Class) - 상속과 다형성","date":"2022.09.17.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-17-상속과-다형성/"}},"staticQueryHashes":[]}