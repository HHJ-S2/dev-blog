{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-12-생성자-소멸자/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>생성자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Color1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> red\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> green\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> blue\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 자신의 다른 생성자를 호출해서 값을 초기화 할 수 있다.</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>white<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Color2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> red\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> green\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> blue\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 클래스에서 구조체와 같은 기능을 사용하려면</span>\n  <span class=\"token comment\">// convenience 키워드를 표기해주어야 한다.</span>\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>white<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적인 <code class=\"language-text\">init() {}</code> 으로 생성하는 생성자는 지정생성자라고 한다.</p>\n<p>클래스에서 자신의 다른 생성자를 사용하려면 <code class=\"language-text\">convenience</code> 키워드를 표기해야 하고, <code class=\"language-text\">self.init</code>으로 호출한다.</p>\n<p>그리고 이것을 클래스에서는 편의생성자라고 한다. (구조체는 <code class=\"language-text\">convenience</code>키워드 필요없음.)</p>\n<p>지정 생성자를 계속 재정의 하는것보다는 편의생성자를 사용하는것이 유지보수 측면에서 좋다.</p>\n<br/>\n<h2>클래스에서 생성자의 상속이 일어나는 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n  <span class=\"token keyword\">var</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BClass</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> z <span class=\"token comment\">// 1. 내 저장속성의 값을 초기화 ⭐️</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. 상속받은 지정생성자 초기화 ⭐️</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3. 자신의 지정생성자 초기화 ⭐️</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지정생성자는 하위클래스에 상속이 되지 않기때문에 상속을 받은 하위클래스에서 초기화를 해주어야 하는것이 필수다.</p>\n<p>즉, 하위클래스에서 상위 클래스의 초기화되지 않은 생성자에 접근하려면 <code class=\"language-text\">super.init</code> 으로 꼭 상위의 지정생성자를 호출해주어야 한다. (말이 너무 어렵다…)</p>\n<p>편의생성자의 경우 자신의 지정생성자를 호출해주어야 하고, 하위클래스에서는 상위클래스의 편의생성자를 재정의 할 수 없다.</p>\n<p>결론은… 모든 지정생성자를 초기화 해주어야 인스턴스 사용이 가능하다.</p>","frontmatter":{"title":"생성자와 소멸자","summary":"생성자와 소멸자","date":"2022.09.12.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-12-생성자-소멸자/"}},"staticQueryHashes":[]}