{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-08-09-반복문(for, while)/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>반복문(for-in)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 0, 1, 2, 3, 4, 5 출력</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token omit keyword\">_</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">...</span><span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"안녕하세요\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// \"안녕하세요\" 3번 출력</span>\n\n  <span class=\"token keyword\">for</span> ary <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"h\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"e\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"l\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"l\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"o\"</span></span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> chr <span class=\"token keyword\">in</span> <span class=\"token string-literal\"><span class=\"token string\">\"hello\"</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// h, e, l, l, o 출력</span>\n\n  <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 1, 3, 5, 7, 9 출력</span>\n  <span class=\"token comment\">// `stride` 홀수 또는 짝수만 출력 가능. to가 10이라면 9까지만 범위로 포함된다.</span></code></pre></div>\n<p>swift 의 반복문은 쉽다.</p>\n<p>자바스크립트의 경우 <code class=\"language-text\">for (let i = 0; i &lt; 10; i++)</code>와 같이 주저리주저리 써야되지만</p>\n<p>swift 에선 범위연산자로 깔끔하게 표기할수있다.</p>\n<p>또한 식별자를 <code class=\"language-text\">_</code>(와일드카드) 로 두면 코드블럭에서 식별자를 생략하고 실행할수 있다.</p>\n<br/>\n<h2>반복문(while, repeat-while)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">while</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">repeat</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n    num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span></code></pre></div>\n<p><code class=\"language-text\">while</code> 반복문은 조건이 <code class=\"language-text\">false</code> 가 될 때까지 반복하기때문에 내부에서 조건을 만족하는 로직이 필요하다.</p>\n<p>만약 그렇게 하지 않으면 무한 루프에 빠지니 주의하자.</p>\n<p><code class=\"language-text\">repeat while</code>문과 <code class=\"language-text\">while</code> 문의 차이점은 조건을 판별하는 순서가 다르다.</p>\n<br/>\n<h2>제어전송문(continue, break)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 1, 3, 5, 7, 9 출력</span></code></pre></div>\n<p>반복문에서 <code class=\"language-text\">continue</code> 를 만나면 아래 코드를 실행하지않고 다음 주기로 뛰어넘는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> num <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 1, 2, 3, 4 출력</span></code></pre></div>\n<p>반복문에서 <code class=\"language-text\">break</code> 를 만나면 반복문을 완전히 종료시킨다.</p>\n<br/>\n<h2>Labeled Statements</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token label important\">OUTER</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"OUTER: \"</span></span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">...</span><span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"INNER: \"</span></span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">break</span><span class=\"token label important\"> OUTER</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// OUTER: 1</span>\n  <span class=\"token comment\">// INNER: 1</span></code></pre></div>\n<p><code class=\"language-text\">break</code>, <code class=\"language-text\">continue</code> 와 함께 사용되며 반복문에 이름(label) 을 붙여 반복 주기를 직접 제어한다.</p>","frontmatter":{"title":"반복문(for, while)","summary":"Swift 반복문(for, while)","date":"2022.08.09.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-08-09-반복문(for, while)/"}},"staticQueryHashes":[]}