{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-18-프로토콜(Protocols)/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>프로토콜(Protocols)</h2>\n<p>프로토콜을 알기 전에 클래스 상속의 단점을 먼저 생각해볼 필요가 있다.</p>\n<br/>\n<p><b>클래스와 상속의 단점</b></p>\n<ol>\n<li>클래스는 하나의 클래스만 상속이 가능하다. (다중 상속이 불가능하다.)</li>\n<li>기본적인 상위클래스의 메모리 구조를 따라갈 수 밖에 없다. (<b>필요하지 않은 속성/메서드도 같이 상속받는다.</b>)</li>\n<li>클래스(레퍼런스 타입)에서만 가능하다.</li>\n</ol>\n<br/>\n<p>클래스 내부에 저장속성이나 메서드가 많아지고 상속이 복잡해질수록 위 단점들이 부담스러워질것이다.</p>\n<p>이때 프로토콜을 사용하면 단점들을 어느정도 보완할 수 있게된다.</p>\n<br/>\n<p>프로토콜이란 실생활에서 자격증의 개념과 비슷한데,</p>\n<p>우리가 자동차운전면허증을 따면 사람들 각각이 운전이라는 능력을 얻을 수 있는것처럼 <b>간단한 규칙만 따르면 능력을 갖게된다.</b></p>\n<p>어떤 기능을 갖고있는 프로토콜(자격증)을 정의한 후 다른 클래스에서 사용하기만 하면 되는것이다.</p>\n<br>\n<h2>예시</h2>\n<p><b>프로토콜을 사용하지 않았을때</b></p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> isFemale <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">layEgg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> isFemale <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"새가 알을 낳는다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"새가 날아간다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Eagle</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// isFemale</span>\n  <span class=\"token comment\">// layEgg()</span>\n  <span class=\"token comment\">// fly()</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">soar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"공중으로 치솟아 날아간다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Penguin</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// isFemale</span>\n  <span class=\"token comment\">// layEgg()</span>\n  <span class=\"token comment\">// fly() // 상속구조에서 어쩔수 없이 날게된 펭귄</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"헤엄친다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구조체가 될 수 없고, 무조건 Bird를 상속해야함.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Airplane</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// isFemale</span>\n  <span class=\"token comment\">// layEgg() // 상속구조에서 알을 낳게된 비행기</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"비행기가 날아간다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FlyingMuseum</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">flyimgDemo</span><span class=\"token punctuation\">(</span>flyingObject<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    flyingObject<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// fly() 라는 메서드를 굳이 상속을 하지 않고 사용하고싶다.</span>\n<span class=\"token comment\">// 꼭 클래스가 아닌, 구조체에서도 fly()를 동작하게 하고싶다.</span></code></pre></div>\n<br/>\n<p><b>프로토콜을 사용했을때</b></p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">CanFly</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 구체적인 구현은 채택한 곳에서</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Eagle</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CanFly</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">soar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"공중으로 치솟아 날아간다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Penguin</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"헤엄친다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Airplane</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">CanFly</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 구조체에서 프로토콜의 fly()만을 가져와서 사용</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"비행기가 날아간다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FlyingMuseum</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// CanFly 프로토콜을 타입으로 인식 가능</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">flyimgDemo</span><span class=\"token punctuation\">(</span>flyingObject<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CanFly</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    flyingObject<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> airplane1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Airplane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> penguin1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Penguin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> eagle1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Eagle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> museum <span class=\"token operator\">=</span> <span class=\"token class-name\">FlyingMuseum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// canFly를 채택한 eagle1, airplane1 만 박물관에 전시 가능</span>\nmuseum<span class=\"token punctuation\">.</span><span class=\"token function\">flyimgDemo</span><span class=\"token punctuation\">(</span>flyingObject<span class=\"token punctuation\">:</span> eagle1<span class=\"token punctuation\">)</span>\nmuseum<span class=\"token punctuation\">.</span><span class=\"token function\">flyimgDemo</span><span class=\"token punctuation\">(</span>flyingObject<span class=\"token punctuation\">:</span> airplane1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// museum.flyimgDemo(flyingObject: penguin1)</span></code></pre></div>","frontmatter":{"title":"프로토콜(Protocols)","summary":"프로토콜(Protocols)","date":"2022.09.18.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-18-프로토콜(Protocols)/"}},"staticQueryHashes":[]}