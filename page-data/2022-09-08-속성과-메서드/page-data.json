{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-08-속성과-메서드/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>저장속성(Stored Properties)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token comment\">// 저장 속성</span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h2>지연저장속성(Lazy Stored Properties)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> weight<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span>\n    <span class=\"token comment\">// lazt let weight: Double = 0.2 // error</span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> bird1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"참새\"</span></span><span class=\"token punctuation\">)</span>\n\n  bird1<span class=\"token punctuation\">.</span>weight <span class=\"token comment\">// 지연저장속성에 접근하는 시점에 초기화 됨.</span></code></pre></div>\n<p>지연저장속성은 저장속성 앞에 <code class=\"language-text\">lazy</code>를 표기한다.</p>\n<p>지연저장속성은 처음부터 메모리 공간을 가지지 않고, 초기화 하는 순간에 해당 저장 속성의 메모리 공간을 생성한다.</p>\n<p>지연저장속성은 선언시점에 기본값을 저장 해야한다. <code class=\"language-text\">lazy var weight: Double = 0.2</code></p>\n<p><code class=\"language-text\">var</code> 변수로만 선언 가능하다.</p>\n<br/>\n<h3>지연 저장 속성을 사용하는 이유</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AVView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n  <span class=\"token comment\">// 메모리를 많이 차지할때</span>\n  <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> view <span class=\"token operator\">=</span> <span class=\"token class-name\">UIImageView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 다른 저장 속성에 의존해야 할때</span>\n  <span class=\"token keyword\">lazy</span> <span class=\"token keyword\">var</span> sum<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> number\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>메모리 공간을 많이 차지하는 이미지 등의 속성을 저장할때 메모리 낭비를 막기위해</li>\n<li>다른 저장 속성에 의존해야 할때(지연저장속성을 이용하면 지연으로 저장된 속성은 먼저 초기화된 속성에 접근 할 수 있게된다.)</li>\n</ul>\n<br/>\n<h2>계산속성(Computed Properties)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Persion</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> birth<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token comment\">// get, set을 age라는 이름으로 묶는다.</span>\n  <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">2022</span> <span class=\"token operator\">-</span> birth\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> <span class=\"token number\">2022</span> <span class=\"token operator\">-</span> age\n\n      <span class=\"token comment\">// 파라미터로 age를 받지 않고 newValue로 표기하여 받을 수 있다.</span>\n      <span class=\"token comment\">// self.birth = 2022 - newValue</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// get만 구현하는 경우 아래와 같이 생략해서 짧게 표기 가능.</span>\n  <span class=\"token comment\">// var age: Int{</span>\n  <span class=\"token comment\">//   return 2022 - birt</span>\n  <span class=\"token comment\">// }</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Persion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nperson1<span class=\"token punctuation\">.</span>birth <span class=\"token operator\">=</span> <span class=\"token number\">2000</span>\nperson1<span class=\"token punctuation\">.</span>age <span class=\"token comment\">// get</span>\nperson1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token comment\">// set</span></code></pre></div>\n<p>계산속성의 <code class=\"language-text\">get</code>은 값을 얻는다(getter)는 의미이고, <code class=\"language-text\">set</code>은 값을 셋팅한다(setter)는 의미이다.</p>\n<p><code class=\"language-text\">get</code>은 반드시 구현해야 하지만 <code class=\"language-text\">set</code>은 생략이 가능하다.</p>\n<p><code class=\"language-text\">var</code> 변수로만 선언 가능하다. 자료형 설정이 필수이다.</p>\n<br/>\n<h2>저장타입속성(Stored Type Properties)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (저장)타입속성</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n  <span class=\"token keyword\">init</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 유저를 생성할때마다 카운트 추가</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> createUser<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> user1 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Any\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> user2 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Jane\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> user3 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Eren\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 저장 타입속성 확인</span>\n<span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span>count <span class=\"token comment\">// 3</span></code></pre></div>\n<p>저장속성 앞에 <code class=\"language-text\">static</code>키워드를 붙혀서 표기한다.</p>\n<p>저장타입속성은 선언시점에 기본값이 필수이다.</p>\n<p>특정 인스턴스에 속한 속성이 아니기때문에 인스턴스 이름으로는 접근할 수 없고, 클래스(or 구조체) 이름으로 접근해야한다. <code class=\"language-text\">User.count</code></p>\n<p>저장타입속성은 기본적으로 지연속성의 성격을 갖는다.</p>\n<br/>\n<h2>계산타입속성(Computed Type Properties)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> count<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">var</span> radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n  <span class=\"token keyword\">init</span> <span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// (계산)타입속성(read only)</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> multipi<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> pi <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>계산속성 앞에 <code class=\"language-text\">static</code>키워드를 붙혀서 표기한다.</p>\n<p><code class=\"language-text\">var</code> 변수로만 선언 가능하다.</p>","frontmatter":{"title":"속성(Property)과 메서드(Method)","summary":"속성(Property)과 메서드(Method)","date":"2022.09.08.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-08-속성과-메서드/"}},"staticQueryHashes":[]}