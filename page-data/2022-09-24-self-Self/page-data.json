{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-24-self-Self/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>self</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// self키워드 사용</span>\n\n<span class=\"token comment\">// 1. 인스턴스를 가리키기 위해 사용</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 2. 새로운 값으로 속성 초기화(클래스는 불가)</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Calculator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> num<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    number <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> num\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 값 타입(구조체, 열거형)에서 인스턴스 값 자체를 치환 가능</span>\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 3. 타입멤버에서 사용하면 인스턴스가 아닌 타입 자체를 가리킴</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyStruct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> club <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"iOS\"</span></span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>club</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\"> 소속 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">MyStruct</span><span class=\"token punctuation\">.</span><span class=\"token function\">printing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"iOS 소속 입니다.\"</span>\n\n\n<span class=\"token comment\">// 4. 타입 인스턴스를 가리키는 경우에 사용</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"SomeClass\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> someClass<span class=\"token punctuation\">:</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span>\n\n<span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"SomeClass\"</span>\n<span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>max <span class=\"token comment\">// 위와 같은</span></code></pre></div>\n<p><code class=\"language-text\">self</code>는 인스턴스를 가리킨다.</p>\n<br/>\n<h2>Self</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 1. 특정 타입 내부에서 타입을 선언하는 위치에 사용</span>\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> zero<span class=\"token punctuation\">:</span> <span class=\"token keyword\">Self</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 2. 프로토콜에서 채택하려는 타입을 지칭 가능</span>\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">BinaryInteger</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">squared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span><span class=\"token function\">squared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></code></pre></div>\n<p><code class=\"language-text\">Self</code>는 타입 자체를 가리킨다.</p>","frontmatter":{"title":"self 와 Self","summary":"self 와 Self","date":"2022.09.24.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-24-self-Self/"}},"staticQueryHashes":[]}