{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-14-is연산자-as연산자/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>is 연산자 / as 연산자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Food</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Food</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// id</span>\n  <span class=\"token keyword\">var</span> season<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"spring\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Strawberry</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// id</span>\n  <span class=\"token comment\">// season</span>\n  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"strawberry\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> strawberry1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Strawberry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> fruit1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> food1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstrawberry1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span>\nstrawberry1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Fruit</span> <span class=\"token comment\">// true</span>\nstrawberry1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token comment\">// true</span>\n\nfruit1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span>\nfruit1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Fruit</span> <span class=\"token comment\">// true</span>\nfruit1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token comment\">// false</span>\n\nfood1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Food</span> <span class=\"token comment\">// true</span>\nfood1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Fruit</span> <span class=\"token comment\">// false</span>\nfood1 <span class=\"token keyword\">is</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">is</code> 연산자는 타입에 대한 검사를 수행하는 연산자이다.</p>\n<p><code class=\"language-text\">인스턴스 is 타입</code> 이항연산자로 비교해서 인스턴스가 뒤에 나오는 타입에 속하는지 판별할 수 있다.</p>\n<br/>\n<h2>as 연산자</h2>\n<p>타입변환을 위해 사용한다. 변환하는 클래스의 방향에 따라 다운캐스팅, 업캐스팅으로 나뉜다.</p>\n<h3>다운캐스팅 as?, as!</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Strawberry라는 클래스로 인스턴스를 만들었지만 타입은 Food로 정의한경우</span>\n<span class=\"token keyword\">var</span> strawberry1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Food</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Strawberry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> strawberry2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Food</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Strawberry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Food였던 타입을 as? 연산자로 Strawberry타입으로 변환할수 있다.</span>\n<span class=\"token comment\">// 성공하면 옵셔널값이기 때문에 if let 바인딩을 통해 접근해야한다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> newStrawberry <span class=\"token operator\">=</span> strawberry1 <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newStrawberry<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// as! 연산자로 변환시 타입을 강제 언래핑한다. 실패에 주의해야한다.</span>\n<span class=\"token keyword\">let</span> strawberry3<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token operator\">=</span> strawberry2 <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token class-name\">Strawberry</span>\nstrawberry3<span class=\"token punctuation\">.</span>name</code></pre></div>\n<p><code class=\"language-text\">인스턴스 as? 타입</code></p>\n<ul>\n<li>성공: <code class=\"language-text\">Optional</code> 타입으로 리턴한다. 필요한경우 Unwrapping 필요</li>\n<li>실패: <code class=\"language-text\">nil</code> 리턴</li>\n</ul>\n<br/>\n<p><code class=\"language-text\">인스턴스 as! 타입</code></p>\n<ul>\n<li>성공: <code class=\"language-text\">Optional</code> 타입을 강제 언래핑한 타입 <br/></li>\n<li>실패: 런타임 오류</li>\n</ul>\n<br/>\n<h3>업캐스팅 as</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> strawberry4<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Strawberry</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Strawberry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Strawberry였던 타입을 Food로 변환시에는 항상 성공한다.</span>\n<span class=\"token keyword\">var</span> newStrawberry <span class=\"token operator\">=</span> strawberry4 <span class=\"token keyword\">as</span> <span class=\"token class-name\">Food</span></code></pre></div>\n<p><code class=\"language-text\">인스턴스 as 타입</code></p>\n<p>상위 클래스의 메모리 구조를 모두 갖고있기때문에 타입캐스팅을 항상 성공한다.</p>\n<br/>\n<h2>switch 문에서 is 연산자, as 연산자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">Any</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.314</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> array <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> item <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">item</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">은 정수타입 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span><span class=\"token label important\">\n\n  case</span> <span class=\"token keyword\">let</span> num <span class=\"token keyword\">as</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">num</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">은 실수타입 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span><span class=\"token label important\">\n\n  case</span> <span class=\"token keyword\">let</span> person <span class=\"token keyword\">as</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">person<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span><span class=\"token label important\">\n\n  default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"그 외의 타입 입니다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">switch</code> 문으로 is, as 패턴을 사용해서 분기처리를 할 수 있다.</p>","frontmatter":{"title":"is연산자 as연산자","summary":"is연산자 as연산자","date":"2022.09.14.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-14-is연산자-as연산자/"}},"staticQueryHashes":[]}