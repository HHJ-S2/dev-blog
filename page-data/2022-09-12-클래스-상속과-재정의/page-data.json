{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-12-클래스-상속과-재정의/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>상속</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"이름\"</span></span>\n  <span class=\"token keyword\">var</span> email <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"abc@def.com\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 상속받은 id, name, email 이 존재함</span>\n  <span class=\"token keyword\">var</span> studentId <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> student1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nstudent1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Any\"</span></span>\nstudent1<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"Any\"</span></code></pre></div>\n<p>상속은 성격이 비슷한 새로운 타입을 만들때, 데이터(저장속성)을 추가하거나 메서드를 변형해서 사용하고싶을때 주로 사용한다.</p>\n<p>상속은 클래스에서만 가능하다.(구조체는 불가능)</p>\n<p>저장속성은 각각의 속성별로 저장공간이 따로 있고, 하위클래스에서는 상속받은 저장속성을 변경할 수 없지만, 메서드는 변형이 가능하다.</p>\n<br/>\n<p>어떤 클래스도 상속받지 않은 클래스를 기본(Base)클래스, 부모 클래스, 슈퍼클래스, 상위클래스 라고 한다.</p>\n<p>상속을 받은 클래스는 자식클래스, 서브클래스, 하위클래스라고 한다.</p>\n<br/>\n<p>더이상 상속을 할 수 없도록 지정하고 싶을때는 <code class=\"language-text\">final</code> 키워드를 표기한다. (저장속성에도 가능)</p>\n<br/>\n<p>생성자의 경우 상속되지 않는다. 재정의의 경우 원칙적으로 불가하나 깊게 알아보면 방법이 있는것 같은데 아직 잘 모르겠음.</p>\n<br/>\n<h2>재정의</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> 에스프레소 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> 금액 <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\n  <span class=\"token keyword\">var</span> 가격정보<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> 금액\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>금액 <span class=\"token operator\">=</span> newValue\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> 만들기<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"샷을 두개 내립니다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> 라떼<span class=\"token punctuation\">:</span> 에스프레소 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> 오늘의커피할인 <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">var</span> 가격정보<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>금액\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>금액 <span class=\"token operator\">=</span> newValue <span class=\"token operator\">-</span> 오늘의커피할인\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//  속성감시자 추가도 가능.</span>\n  <span class=\"token comment\">//  override var 가격정보: Int {</span>\n  <span class=\"token comment\">//    didSet(금액) {</span>\n  <span class=\"token comment\">//      print(\"가격이 \\(금액)에서 \\(self.금액)로 변경되었습니다.\")</span>\n  <span class=\"token comment\">//    }</span>\n  <span class=\"token comment\">//  }</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">func</span> 만들기<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>만들기<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"샷에 우유를 추가합니다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> 라떼한잔 <span class=\"token operator\">=</span> 라떼<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n라떼한잔<span class=\"token punctuation\">.</span>만들기<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n라떼한잔<span class=\"token punctuation\">.</span>가격정보 <span class=\"token operator\">=</span> <span class=\"token number\">4500</span>\n라떼한잔<span class=\"token punctuation\">.</span>금액 <span class=\"token comment\">// 4000</span></code></pre></div>\n<p>클래스의 메서드의 경우 <code class=\"language-text\">override</code> 키워드를 표기하여 하위클래스에서 상위클래스의 메서드 변형이 가능하며</p>\n<p>이렇게 변형 하는것을 <b>재정의</b> 라고 한다. (계산속성도 가능)</p>\n<p>상속받은 메서드를 호출할경우 <code class=\"language-text\">super</code> 키워드로 접근한다. <code class=\"language-text\">super.만들기()</code></p>\n<br/>\n<h2>클래스에서 생성자의 상속이 일어나는 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n  <span class=\"token keyword\">var</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BClass</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">AClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span>\n\n  <span class=\"token comment\">// 저장속성 추가시 지정생성자로 구현</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> z <span class=\"token comment\">// 1. 내 저장속성의 값을 초기화 ⭐️</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. 상속받은 지정생성자 초기화 ⭐️</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 저장속성을 추가하지 않고 상위클래스의 지정생성자만 재정의 하는경우 override</span>\n  <span class=\"token comment\">//  override init(x: Int, y: Int) {</span>\n  <span class=\"token comment\">//    super.init(x: x, y: y)</span>\n  <span class=\"token comment\">//  }</span>\n\n  <span class=\"token comment\">// 편의생성자로 구현</span>\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1. 자신의 지정생성자 초기화 ⭐️</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>지정생성자는 하위클래스에 상속이 되지 않기때문에 상속을 받은 하위클래스에서 초기화를 해주어야 하는것이 필수다.</p>\n<p>즉, 하위클래스에서 상위 클래스의 초기화되지 않은 생성자에 접근하려면 <code class=\"language-text\">super.init</code> 으로 꼭 상위의 지정생성자를 호출해주어야 한다.</p>\n<p>편의생성자의 경우 자신의 지정생성자를 호출해주어야 하고, 하위클래스에서는 상위클래스의 편의생성자를 재정의 할 수 없다.</p>\n<br/>\n<h4>1️⃣ 상위 클래스의 지정생성자 체크</h4>\n<br/>\n<h4>2️⃣ 상속받은 하위클래스에서 저장속성을 추가하는지 체크</h4>\n<br/>\n<h4>추가해야하는 저장속성이 있는경우</h4>\n<ol>\n<li>내 저장속성의 값을 초기화</li>\n<li>상속받은 지정생성자 초기화</li>\n</ol>\n<h4>추가해야하는 저장속성이 없는경우</h4>\n<ol>\n<li><code class=\"language-text\">override</code> 로 상위클래스의 지정생성자만 초기화</li>\n</ol>\n<br/>\n<h4>3️⃣ 상속을받은 하위클래스에서 편의생성자를 추가하는 경우 주의</h4>\n<ol>\n<li>하위클래스에서 <code class=\"language-text\">override</code> 로 편의생성자를 추가하는경우 편의생성자에서 <code class=\"language-text\">self.init</code>을 하는것은 상위가 아니라 나 자신의 지정생성자를 호출하는것이다.</li>\n</ol>\n<br/>\n<p>결론은… 모든 지정생성자를 초기화 해주어야 인스턴스 사용이 가능하다.</p>","frontmatter":{"title":"클래스(Class) - 상속과 재정의","summary":"클래스(Class) - 상속과 재정의","date":"2022.09.12.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-12-클래스-상속과-재정의/"}},"staticQueryHashes":[]}