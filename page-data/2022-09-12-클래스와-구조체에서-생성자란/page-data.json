{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-09-12-클래스와-구조체에서-생성자란/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>지정생성자, 편의생성자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Color1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> red\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> green\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> blue\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 지정생성자</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 자신의 다른 생성자를 호출해서 값을 초기화 할 수 있다.</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>white<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Color2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span>\n\n  <span class=\"token comment\">// 지정생성자</span>\n  <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>red <span class=\"token operator\">=</span> red\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>green <span class=\"token operator\">=</span> green\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>blue <span class=\"token operator\">=</span> blue\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 편의생성자</span>\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">convenience</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>white<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적인 <code class=\"language-text\">init() {}</code> 으로 생성하는 생성자는 <b>지정생성자</b>라고 한다.</p>\n<p>클래스에서 자신의 지정 생성자를 사용하려면 <code class=\"language-text\">convenience</code> 키워드를 표기해야 하고, <code class=\"language-text\">self.init</code>으로 호출한다.</p>\n<p>그리고 이것을 클래스에서는 <b>편의생성자</b>라고 한다. (구조체는 <code class=\"language-text\">convenience</code>키워드 필요없음.)</p>\n<p>지정 생성자를 계속 재정의 하는것보다는 편의생성자를 사용하는것이 유지보수 측면에서 좋다.</p>\n<br/>\n<h2>필수 생성자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NewView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGRect</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> frame<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 지정생성자를 재정의할경우 필수생성자를 구현해야한다.</span>\n  <span class=\"token keyword\">required</span> <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>coder<span class=\"token punctuation\">:</span> <span class=\"token class-name\">NSCoder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"init(coder:) has not been implemented\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>필수생성자는 <code class=\"language-text\">required</code> 키워드로 표기하고, 필수생성자가 있는 하위클래스에서는 반드시 해당 필수생성자를 구현해야한다.</p>\n<p>이 필수생성자는 파라미터이름 및 타입이 완전히 일치해야한다.</p>\n<p>다른 지정생성자를 구현하지 않는경우 자동으로 필수생성자가 상속된다.</p>\n<br/>\n<h2>실패가능 생성자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> species<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n  <span class=\"token comment\">// 실패가능생성자</span>\n  <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>species<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> species<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> species\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> animal1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span>species<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// nil</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">TemperatureUnit1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> kelvin\n  <span class=\"token keyword\">case</span> celsius\n  <span class=\"token keyword\">case</span> fahrenheit\n\n  <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> symbol <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"K\"</span></span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>kelvin\n      <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>celsius\n      <span class=\"token keyword\">case</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>fahrenheit\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TemperatureUnit1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">TemperatureUnit1</span><span class=\"token punctuation\">.</span>celsius\n<span class=\"token keyword\">let</span> f<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TemperatureUnit1</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">TemperatureUnit1</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 열거형의 원시값을 성정하는것과 실패가능생성자는 거의 유사하다.</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">TemperatureUnit2</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Character</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> kelvin <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"K\"</span></span>\n  <span class=\"token keyword\">case</span> celsius <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"C\"</span></span>\n  <span class=\"token keyword\">case</span> fahrenheit <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> f1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">TemperatureUnit2</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">TemperatureUnit2</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"F\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실패가능생성자는 <code class=\"language-text\">init?</code> 키워드로 표기하고 생성자 스코프에서 상황에 따라 <code class=\"language-text\">nil</code>을 반환하도록 한다.</p>\n<p>오버로딩으로 인한 구분이 안되므로 해당 이름을 가진 생성자는 유일해아한다.</p>\n<br/>\n<ul>\n<li>실패가능생성자 -> 실패불가능생성자 호출: O (가능)</li>\n<li>실패불가능생성자 -> 실패가능생성자 호출: X (불가능)</li>\n</ul>\n<br/>\n<ul>\n<li>(상위)실패가능생성자 -> (하위)실패불가능생성자 재정의: O (가능) 강제 언래핑 가능.</li>\n<li>(상위)실패불가능생성자 -> (하위)실패가능생성자 재정의: X (불가능)</li>\n</ul>\n<br/>\n<h2>소멸자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aclass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">deinit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"인스턴스 삭제\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> class1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Aclass</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Aclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclass1 <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span> <span class=\"token comment\">// \"인스턴스 삭제\"</span></code></pre></div>\n<p>소멸자는 클래스에서만 존재하고, 최대 1개의 소멸자만 존재 할 수 있다.</p>\n<p>소멸자는 인스턴스가 메모리에서 제거되기 직전에 자동으로 호출되는 메서드이다.</p>","frontmatter":{"title":"클래스와 구조체에서 생성자란","summary":"지정생성사, 편의생성자, 필수생성자, 실패가능생성자, 소멸자에 관하여","date":"2022.09.12.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-09-12-클래스와-구조체에서-생성자란/"}},"staticQueryHashes":[]}