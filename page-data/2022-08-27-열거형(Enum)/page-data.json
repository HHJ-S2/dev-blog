{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-08-27-열거형(Enum)/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2>열거형(Enum)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Gender</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> female<span class=\"token punctuation\">,</span> male\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> female<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gender</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Gender</span><span class=\"token punctuation\">.</span>female</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> monday\n    <span class=\"token keyword\">case</span> tuesday\n    <span class=\"token keyword\">case</span> wednesday\n    <span class=\"token keyword\">case</span> thursday\n    <span class=\"token keyword\">case</span> friday\n    <span class=\"token keyword\">case</span> saturday\n    <span class=\"token keyword\">case</span> sunday\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> today<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Weekday</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>monday\n  today <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>friday</code></pre></div>\n<p><code class=\"language-text\">enum</code>을 사용해서 직접 타입과 타입 리터럴 값을 정의할 수 있다.</p>\n<p>열거형을 사용하면 코드의 가독성과 안전성이 높아진다.</p>\n<br/>\n<h2>열거형의 원시값(Row values)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> shirt\n    <span class=\"token keyword\">case</span> pants\n    <span class=\"token keyword\">case</span> shoes\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"shirt\"</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Alignment</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">left</span>\n    <span class=\"token keyword\">case</span> center\n    <span class=\"token keyword\">case</span> <span class=\"token keyword\">right</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">Alignment</span><span class=\"token punctuation\">(</span>rawValue<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// left</span></code></pre></div>\n<p>열거형에 원시값을 정의할 수 있다.</p>\n<p><code class=\"language-text\">Int</code>로 지정하면 순서대로 0, 1, 2… 가 정의되고, <code class=\"language-text\">String</code>으로 지정하면 입력한 텍스트 자체가 원시값으로 정의된다.</p>\n<br/>\n<h2>열거형의 연관값(Associated values)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Barcode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">upc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> upc<span class=\"token punctuation\">:</span><span class=\"token class-name\">Barcode</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Barcode</span><span class=\"token punctuation\">.</span><span class=\"token function\">upc</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85909</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51226</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> qrCode<span class=\"token punctuation\">:</span><span class=\"token class-name\">Barcode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"ABCDEFGHIJKLMNOP\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>연관값을 사용하면 하나의 케이스에 서로 다른 연관값을 저장하여, 같은 형이지만 다른 형태의 값을 갖을수 있다.</p>\n<p>연관값은 새로운 변수에 열거형 값을 생성할때 값을 저장한다.</p>\n<br/>\n<h2>열거형과 switch문</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Gender</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> female\n    <span class=\"token keyword\">case</span> male\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> you<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Gender</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>male\n\n  <span class=\"token keyword\">switch</span> you <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>female<span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"여자입니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>male<span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"남자입니다.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"성별을 알 수 없습니다.\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거형 또는 옵셔널 열거형은 <code class=\"language-text\">switch</code>문으로 분기처리를 할 때 주로 사용된다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Barcode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">upc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> qrCode<span class=\"token punctuation\">:</span><span class=\"token class-name\">Barcode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ABC\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> barcodes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Barcode</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ABC\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"DEF\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"GHJ\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">upc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">upc</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">switch</span> qrCode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> qr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 위의 switch 문을 if case문으로 으로 짧게 작성 가능하다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> qr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> qrCode <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"ABC\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// for case문을 사용할 수도 있다.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> <span class=\"token punctuation\">.</span><span class=\"token function\">qrCode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> qr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> barcodes <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"ABC\", \"DEF\", \"GHJ\"</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">if case</code>나 <code class=\"language-text\">for case</code>로 짧게 작성도 가능하다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">let</span> array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// 열거형 케이스 패턴</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> array <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2, 3, 5</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 옵셔널 패턴</span>\n  <span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> number<span class=\"token operator\">?</span> <span class=\"token keyword\">in</span> array <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2, 3, 5</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거형 case 패턴의 <code class=\"language-text\">.some</code> 대신 <code class=\"language-text\">?</code> 을 사용하여 간소화 할 수 있다.</p>\n<br/>\n<h3>참고</h3>\n<p><a href=\"https://jusung.gitbook.io/the-swift-language-guide/language-guide/08-enumerations\" target=\"_blank\" rel=\"nofollow\">The Swift Language Guide</a></p>","frontmatter":{"title":"열거형(Enum)","summary":"열거형(Enum)","date":"2022.08.27.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-08-27-열거형(Enum)/"}},"staticQueryHashes":[]}