{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2022-08-20-옵셔널타입(Optional type)/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">var</span> number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">var</span> text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">var</span> number2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Double</span><span class=\"token operator\">?</span></code></pre></div>\n<p>옵셔널 타입은 값이 없을수도 있는 상황일때 자료형 뒤에 <code class=\"language-text\">?</code>기호를 붙혀서 사용한다.</p>\n<p>값을 따로 초기화하지 않으면 자동으로 <code class=\"language-text\">nil</code>로 초기화 된다.</p>\n<p>옵셔널 타입에서의 <code class=\"language-text\">nil</code>은 실제로 값이 없는것이 아니라 ‘값이 없다는 의미를 갖고있는 값’이다.</p>\n<br/>\n<h2>옵셔널타입 값 사용(unWrapping)</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">let</span> optionalInt<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>optionalInt<span class=\"token punctuation\">)</span> <span class=\"token comment\">// warning</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>optionalInt<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Optional(10)</span></code></pre></div>\n<p>옵셔널 타입의 값을 강제로 추출할때는 변수명 뒤에 <code class=\"language-text\">!</code>를 붙힌다.</p>\n<p>값이 초기화 되어있는, <code class=\"language-text\">nil</code>이 아닌 경우에만 가능하다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">let</span> num1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">let</span> num2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// error</span></code></pre></div>\n<p>옵셔널 타입끼리의 계산은 불가능 하다.</p>\n<br/>\n<h2>옵셔널 바인딩</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"hello\"</span></span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> hello <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">checkOptionalType</span> <span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> temp2 <span class=\"token operator\">=</span> hello <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">checkOptionalType</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">)</span></code></pre></div>\n<p>옵셔널타입인지 판단한뒤 특정 조건을 실행시키고 싶을때</p>\n<p>옵셔널타입인 변수를 <code class=\"language-text\">if</code>문이나 <code class=\"language-text\">guard</code>문 조건에서 밸류 바인딩 패턴과 함께 사용한다.</p>\n<p>값이 새로운 상수에 바인딩이 된다면(=값이 있다면) 옵셔널 값인지 판단할 수 있다.</p>\n<br/>\n<h2>Nil-Coalescing 연산자</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span>\n  <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> name <span class=\"token operator\">??</span> <span class=\"token string-literal\"><span class=\"token string\">\"unnamed user\"</span></span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">// unnamed user 출력</span></code></pre></div>\n<p><code class=\"language-text\">??</code>연산자를 사용해서 옵셔널 타입인 변수에 값이 <code class=\"language-text\">nil</code>이라면 기본값을 설정 할 수 있다.</p>\n<br/>\n<h2>옵셔널 타입의 파라미터</h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">  <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printUser</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token nil constant\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> tempAge <span class=\"token operator\">=</span> age <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tempAge<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">printUser</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"Annie\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Annie\" 출력</span>\n  <span class=\"token function\">printUser</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"James\"</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"James\", 14 출력</span></code></pre></div>\n<p>함수 파라미터에 옵셔널타입을 지정하고 <code class=\"language-text\">nil</code>로 초기화 해주면</p>\n<p>함수를 호출할때 해당 옵셔널 타입의 파라미터는 인수로 전달 하지 않아도 된다.</p>","frontmatter":{"title":"옵셔널타입(Optional type)","summary":"옵셔널타입의 여러 케이스들","date":"2022.08.20.","categories":["TIL","Swift"]}}}]}},"pageContext":{"slug":"/2022-08-20-옵셔널타입(Optional type)/"}},"staticQueryHashes":[]}